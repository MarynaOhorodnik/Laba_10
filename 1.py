'''
Сформувати функцію, що буде обчислювати факторіал заданого користувачем натурального числа n.
Огороднік Марина Олександрівна, І курс, група 122А
'''
'''
У даному випадку доцільніше використовувати рекурсію, тому що функція з рекурсією більш читабельніша, ніж з ітерацією;
не потрібно вводити додаткові змінні, час розробки швидший у випадку з рекурсією. Хоча обсяг пам'яті більший у випадку 
рекурсії, але якщо вихідне число не дуже велике, то обсяг пам'яті не значний. Час виконання функцій практично однакове
(у випадку ітерації час трохи менший)
'''
import timeit  # імпортуємо модуль для обрахунку часу роботи функцій
def factorial_rec(A):
    ''' Функція знаходження факторіалу за допомогою рекурсії

    :param A: Число, для якого буде знаходитися А!
    :return: Результат А!
    '''
    if A == 1 or A == 0:  # Зазначаємо базовий випадок, при якому рекурсія зупиняється
        return 1
    else:
        return A * factorial_rec(A - 1)

def factorial_it(B):
    ''' Функція знаходження факторіалу за допомогою ітерації

    :param B: Число, для якого буде знаходитися В!
    :return: Результат В!
    '''
    f = 1  # вводимо змінну, в яку буде записуватися результат знаходження факторіалу
    while B > 0:  # Зазначаємо базовий випадок, при якому ітерації циклу закінчаться
        f *= B  # домножуємо в змінну f число
        B -= 1  # на кожній терації зменшуємо В число на одиницю
    return f

while True:
    while True:
        try:  # перевірка на правильність введення даних
            C = int(input('Input a number: '))
            if C >= 0:  # виключення випадку, що користувач введе число менше 0
                break
            else:
                print('The number mut be positive. Try again')
        except ValueError:
            print('It is not a number')
    # виводимо результат і час виконання функції
    print(f'Recursion: \nFactorial of {C} = {factorial_rec(C)}, '
          f'\ntime = {timeit.timeit("factorial_rec(C)", setup="from __main__ import factorial_rec, C", number=1000)}')
    print(f'Iteration: \nFactorial of {C} = {factorial_it(C)}, '
          f'\ntime = {timeit.timeit("factorial_it(C)", setup="from __main__ import factorial_it, C", number=1000)}')

    # запитуємо кристувача чи продовжувати роботу далі, чи завершити програму
    answer = input('Do you want to continue (+) or complete the program (anything)? ')
    if answer == '+':
        continue
    else:
        break