'''
Сформувати функцію для обчислення цифрового кореню натурального числа.
Цифровий корінь отримується наступним чином: необхідно скласти всі цифри заданого
числа, потім скласти всі цифри знайденої суми і повторювати процес до тих пір, поки
сума не буде дорівнювати однозначному числу, що і буде цифровим коренем заданого числа.
Огороднік Марина Олександрівна, І курс, група 122А
'''
'''
У даному випадку доцільніше використовувати рекурсію, тому що функція з рекурсією більш читабельніша, ніж з ітерацією;
не потрібно вводити додаткові списки, які потрібно постійно очищувати на кожній ітерації, час розробки швидший у випадку 
з рекурсією. Обсяг пам'яті ооднаковий у обох випадках. Час виконання функцій практично однакове
(у випадку ітерації час трохи менший)
'''
import timeit  # імпортуємо модуль для обрахунку часу роботи функцій
def digit_sqrt_rec(N):
    ''' Функція для обчислення цифрового кореню за допомогою рекурсії

    :param N: Число, для якого буде знаходиттися цифровий корінь
    :return: результат функції
    '''
    if len(str(N)) == 1:  # Зазначаємо базовий випадок, при якому рекурсія зупиняється
        return N
    else:
        # викликаємо функцію для числа, яке перед цим перетворили у список цифр, які потім просумували
        return digit_sqrt_rec(sum(list(map(int, list(str(N))))))

def digit_sqrt_iter(M):
    ''' Функція для обчислення цифрового кореню за допомогою терації

    :param M: Число, для якого буде знаходиттися цифровий корінь
    :return: результат функції
    '''
    while len(str(M)) > 1:  # Зазначаємо умову, при якомій ітерації циклу закінчаться
        l = []  # вводимо пустий список, куди буде записуватися результат ітерацій. Список на кожній ітерації буде новий
        while M > 0:  # Зазначаємо умову, при якомій ітерації циклу закінчаться
            l.append(M % 10)  # записуємо в списк кожного разу останню цифру числа
            M //= 10  # ділимо число націло на 10
        M = sum(l)   # знаходимо суму цифр
    return M

while True:
    while True:
        try:  # перевірка на правильність введення даних
            A = int(input('Input a number: '))
            if A > 0:   # виключення випадку, що користувач введе число менше 0
                break
        except ValueError:
            print('It is not a number')
    # виводимо результат і час виконання функції
    print(f'Recursion: \nDigital sqrt of {A} = {digit_sqrt_rec(A)}, '
          f'\ntime = {timeit.timeit("digit_sqrt_rec(A)", setup="from __main__ import digit_sqrt_rec, A", number=1000)}')
    print(f'Iteration: \nDigital sqrt of {A} = {digit_sqrt_iter(A)}, '
          f'\ntime = {timeit.timeit("digit_sqrt_iter(A)", setup="from __main__ import digit_sqrt_iter, A", number=1000)}')

    # запитуємо кристувача чи продовжувати роботу далі, чи завершити програму
    answer = input('Do you want to continue (+) or complete the program (anything)? ')
    if answer == '+':
        continue
    else:
        break