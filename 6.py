'''
Сформувати функцію для переведення натурального числа з десяткової системи числення у шістнадцятирічну.
Огороднік Марина Олександрівна, І курс, група 122А
'''
'''
У даному випадку доцільніше використовувати рекурсію, тому що функція з рекурсією більш читабельніша, ніж з ітерацією;
не потрібно вводити додаткові змінні (списки), час розробки швидший у випадку з рекурсією. Хоча обсяг пам'яті більший у 
випадку  рекурсії, але якщо вихідне число не дуже велике, то обсяг пам'яті не значний. Час виконання функцій практично 
однакове (у випадку ітерації час трохи менший)
'''
import timeit  # імпортуємо модуль для обрахунку часу роботи функцій
# створимо словник із значень для переведення чисел в букви для шістнадцятирічної системи числення
code = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}
def func_rec(x):
    ''' Функція для переведення числа з десяткової системи числення у шістнадцятирічну за допомогою рекурсії

    :param x: вихідне число
    :return: перетворене число у шістнадцятирічну систему числення
    '''
    # щоб перевести число, потрібно його цикліно ділити на 16 і остачі скласти у зворотньому порядку
    if x >= 16:  # перевірка чи число, або остача від ділення менше 16, щоб завершити функцію
        if x % 16 in range(10, 16):  # якщо остача від ділення в межах від 10 до 15, то потрібно перевести чило в букву
            return func_rec(x // 16) + code[x % 16]
        else:  # якщо остача від ділення менше 10, то просто переводимо число в стрічку і додаємо до результату
            return func_rec(x // 16) + str(x % 16)
    else:  # якщо остача від ділення менше 16, то додаємо останній елемент до результату
        if x in range(10, 16):
            return code[x % 16]
        else:
            return str(x % 16)

def func_iter(y):
    ''' Функція для переведення числа з десяткової системи числення у шістнадцятирічну за допомогою рекурсії

    :param y: вихідне число
    :return: перетворене число у шістнадцятирічну систему числення
    '''
    l = []   # вводимо пусти список, куди буде записуватися остачі від ділення
    while y > 16:  # визначаємо умову, при якій завершаться ітерації циклу
        if y % 16 in range(10, 16):  # якщо остача від ділення в межах від 10 до 15, то потрібно перевести чило в букву
            l.append(code[y % 16])
        else:   # якщо остача від ділення менше 10, то просто переводимо число в стрічку і додаємо в список
            l.append(str(y % 16))
        y //= 16  # ділимо число націло на 16
    else:   # якщо цикл завершився то додаємо відповідно останній елемент в список
        if y in range(10, 16):
            l.append(code[y])
        else:
            l.append(str(y))
    l.reverse()  # перезаписуємо елементи списку у зворотньому порядку
    return ''.join(l)   # об'єднуємо елементи списку в стрічку

while True:
    while True:
        try:  # перевірка на правильність введення даних
            A = int(input('Input a number: '))
            if A > 0:   # виключення випадку, що користувач введе число менше 0
                break
        except ValueError:
            print('It is not a number')
    # виводимо результат і час виконання функції
    print(f'Recursion: \n({A})10 = ({func_rec(A)})16 '
          f'\ntime = {timeit.timeit("func_rec(A)", setup="from __main__ import func_rec, A", number=1000)}')
    print(f'Iteration: \n({A})10 = ({func_iter(A)})16 '
          f'\ntime = {timeit.timeit("func_iter(A)", setup="from __main__ import func_iter, A", number=1000)}')

    # запитуємо кристувача чи продовжувати роботу далі, чи завершити програму
    answer = input('Do you want to continue (+) or complete the program (anything)? ')
    if answer == '+':
        continue
    else:
        break